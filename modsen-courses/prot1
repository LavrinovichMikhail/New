// function returnSpecifics(obj){
//     return Object.values(obj).filter((value) => typeof value == "number").concat(Object.keys(obj).filter((key) => typeof(obj[key]) == "function")) 
// }

// function returnSpecifics2(obj, a = {"The Object is Empty":function(){}}){
//     return Object.values(obj).filter((value) => typeof value == "number").concat(Object.keys((Object.entries(obj).length) ? obj : a).filter((key) => typeof(((Object.entries(obj).length) ? obj : a)[key]) == "function")) 
// }

// const user = {
//     name: "Alice",
//     prop: "dynamic",
//     sayHi: function () {console.log("Hello, I'm " + this.name)},
//     age: 20,
//     adress: {
//         city: "dynamic"
//     }
// }

// Object.prototype.hash = function(string) {
//     return string.split(".").reduce((res,value) => res = res != undefined ? res[value] : undefined,this)
// }
// console.log(Object.prototype.isPrototypeOf(1))

// console.log(user.hash("adress.city"))

// console.log(user["adress"]["city"])

// console.log(returnSpecifics2({}))

// console.log(!Object.entries({}).length)

// console.log(Object.keys((Object.entries({}).length) ? {} : {"The Object is Empty":function(){}}))


// function solution (data, replace) {
//     if(typeof data !== "array" && typeof data !== "object") return data
//     for(let el in data) {
//         if(typeof data[el] === "array" || typeof data[el] === "object") data[el] = solution(data[el],replace)
//         data[el] = (data[el] == "dynamic") ? replace : data[el]
//     }
//     return data
//   }
//   for(let el in user) {
//     //user[el] = (user[el] == "dynamic") ? "static" : user[el]
//     console.log(typeof user[el] === "object")
//   }
// console.log(solution(user, "Town"))
// console.log(user.adress)
// console.log(typeof user)

// function combine(...objs) {
//     const newObj = {...objs.shift()}
//     for(let obj of objs) for(let el in obj) newObj[el] = typeof newObj[el] == "number" ? newObj[el] + obj[el] : obj[el]
//     return newObj
//   }
  const objA = { a: 10, b: 20, c: 30 }
  const objB = { a: 3, c: 6, d: 3 }
  const objC = { a: 5, d: { e: 1}, e: { c: { d: { e: 1} } } }
  const objD = { c: 3 }
  // console.log(combine(objA,objB))
  function depth(obj) {
    var d = 0;
    if(typeof obj === "object" && !Array.isArray(obj) && obj !== null) {
      if(Object.keys(obj).length) { 
        for(let el in obj) 
          if(typeof obj[el] === "object" && (obj[el] != null && !Array.isArray(obj) && Object.keys(obj[el]))) {
            let maxDepth = 1 + depth(obj[el])
            d = maxDepth > d ? maxDepth : d
          }
      }  
    }
    return d
  }
// var result = 1;
//   function depth(obj) {
//     if(typeof obj !== "object" || Array.isArray(obj) || obj === null) return 0
//     JSON.stringify(obj).split('').reduce((res,el,i) => {
//         if(el == "{" && JSON.stringify(obj).split('')[i+1] != "}") res++
//         if(el == "}" && JSON.stringify(obj).split('')[i-1] != "{") res--
//         result = res > result ? res : result
//         return res
//     },0)
//     return result
//   } 
//   console.log(depth({}))

  
  console.log(depth({a: 1}))